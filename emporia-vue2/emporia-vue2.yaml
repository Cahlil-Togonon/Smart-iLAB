esphome:
  name: emporia-vue2-25

external_components:
  - source: github://emporia-vue-local/esphome@dev
    components: [ emporia_vue ]

esp32:
  board: esp32dev
  framework:
    type: esp-idf
    version: recommended

logger:
  logs:
    sensor: INFO

# Enable Home Assistant API
api:
  encryption:
    key: "LAD27rXNFIKVqXFDv+3YT5DkmbkyNMYx9ypCKbgCwdA="

  services:
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

ota:
  password: "++adminsmartilab2023!!"
  num_attempts: 3

web_server:
  port: 80

wifi:
  ssid: "Smart-iLAB"
  password: "++adminsmartilab2023!!"
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 10.158.71.55
    # Set this to the IP address of the router. Often ends with .1
    gateway: 10.158.71.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Vue2 Fallback Hotspot"
    password: "++adminsmartilab2023!!"
    ap_timeout: 30s
  
  reboot_timeout: 2min

preferences:
  # please also make sure `restore: false` is set on all `platform: total_daily_energy`
  # sensors below.
  flash_write_interval: "48h"

output:
  - platform: ledc
    pin: GPIO12
    id: buzzer
  - platform: gpio
    pin: GPIO27
    id: buzzer_gnd

rtttl:
  output: buzzer
  on_finished_playback:
    - logger.log: 'Song ended!'

button:
  - platform: template
    name: "Two Beeps"
    on_press:
      - rtttl.play: "two short:d=4,o=5,b=100:16e6,16e6"

light:
  - platform: status_led
    name: "D3_LED"
    pin: 23
    restore_mode: ALWAYS_ON
    entity_category: config

i2c:
  sda: 21
  scl: 22
  scan: false
  frequency: 200kHz  # recommended range is 50-200kHz
  id: i2c_a

time:
  - platform: sntp
    id: my_time
    timezone: Asia/Manila

debug:
  update_interval: 120s

text_sensor:
  - platform: debug
    reset_reason:
      name: "Reset Reason"

# these are called references in YAML. They allow you to reuse
# this configuration in each sensor, while only defining it once
.defaultfilters:
  - &moving_avg
    # we capture a new sample every 0.24 seconds, so the time can
    # be calculated from the number of samples as n * 0.24.
    sliding_window_moving_average:
      # we average over the past 2.88 seconds
      window_size: 12
      # we push a new value every 1.44 seconds
      send_every: 6
  - &invert
    # invert and filter out any values below 0.
    lambda: 'return max(-x, 0.0f);'
  - &pos
    # filter out any values below 0.
    lambda: 'return max(x, 0.0f);'
  - &abs
    # take the absolute value of the value
    lambda: 'return abs(x);'
  # Reduce noise in the power class
  - &power_max
    or:
      - delta: 5
      - throttle: 60s
  - &power_min
    throttle: 3s
  - &throttle_energy
    or:
      - delta: 10
      - throttle: 60s

sensor:
  - platform: emporia_vue
    i2c_id: i2c_a
    phases:
      - id: phase_a  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLACK  # Vue device wire color
        calibration: 0.022  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula  *  / 
        voltage:
          name: "Phase A Voltage"
          filters: [*moving_avg, *pos]
        frequency:
          name: "Phase A Frequency"
          filters: [*moving_avg, *pos]
      - id: phase_b  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: RED  # Vue device wire color
        calibration: 0.022  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula  *  / 
        voltage:
          name: "Phase B Voltage"
          filters: [*moving_avg, *pos]
        phase_angle:
          name: "Phase B Phase Angle"
          filters: [*moving_avg, *pos]
      - id: phase_c  # Verify that this specific phase/leg is connected to correct input wire color on device listed below
        input: BLUE  # Vue device wire color
        calibration: 0.022  # 0.022 is used as the default as starting point but may need adjusted to ensure accuracy
        # To calculate new calibration value use the formula  *  / 
        voltage:
          name: "Phase C Voltage"
          filters: [*moving_avg, *pos]
        phase_angle:
          name: "Phase C Phase Angle"
          filters: [*moving_avg, *pos]
    ct_clamps:
      - phase_id: phase_a
        input: "A"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "Phase A Power"
          id: phase_a_power
          device_class: power
          filters: [*moving_avg, *pos]
      - phase_id: phase_b
        input: "B"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "Phase B Power"
          id: phase_b_power
          device_class: power
          filters: [*moving_avg, *pos]
      - phase_id: phase_c
        input: "C"  # Verify the CT going to this device input also matches the phase/leg
        power:
          name: "Phase C Power"
          id: phase_c_power
          device_class: power
          filters: [*moving_avg, *pos]
      # Pay close attention to set the phase_id for each breaker by matching it to the phase/leg it connects to in the panel
      # Some circuits are commented out because they don't have a CT connected yet
      - { phase_id: phase_b, input:  "1", power: { name: "#1 Power", internal: true, id:  cir1, filters: [ *pos, multiply: 1 ] } }
      - { phase_id: phase_b, input:  "2", power: { name: "#2 Power", id:  cir2, internal: true, filters: [ *pos, multiply: 1 ] } }
      # - { phase_id: phase_b, input:  "3", power: { name: "#3 Power", id:  cir3, internal: true, filters: [ *pos, multiply: 1 ] } }
      # - { phase_id: phase_b, input:  "4", power: { name: "#4 Power", id:  cir4, internal: true, filters: [ *pos, multiply: 1 ] } }
      # - { phase_id: phase_b, input:  "5", power: { name: "#5 Power", internal: true, id:  cir5, filters: [ *pos, multiply: 1 ] } }
      # - { phase_id: phase_b, input:  "6", power: { name: "#6 Power", internal: true, id:  cir6, filters: [ *pos ] } }
      # - { phase_id: phase_b, input:  "7", power: { name: "#7 Power", internal: true, id:  cir7, filters: [ *pos ] } }
      # - { phase_id: phase_b, input:  "8", power: { name: "#8 Power", id: cir8, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input:  "9", power: { name: "#9 Power", id: cir9, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input: "10", power: { name: "#10 Power", id: cir10, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input: "11", power: { name: "#11 Power", id: cir11, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input: "12", power: { name: "#12 Power", id: cir12, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input: "13", power: { name: "#13 Power", id: cir13, internal: true, filters: [ *pos ] } }
      # - { phase_id: phase_c, input: "14", power: { name: "#14 Power", id: cir14, internal: true, filters: [ *pos ] } }
      - { phase_id: phase_c, input: "15", power: { name: "#15 Power", internal: true, id: cir15, filters: [ *pos ] } }
      - { phase_id: phase_c, input: "16", power: { name: "#16 Power", internal: true, id: cir16, filters: [ *pos ] } }
    on_update:
      then:
        - component.update: total_power
        # - component.update: balance_power
  # The copy sensors filter and send the power state to HA
  - { platform: copy, name: "Phase A Power", source_id: phase_a_power, filters: [ *power_min, *power_max ] }
  - { platform: copy, name: "Phase B Power", source_id: phase_b_power, filters: [ *power_min, *power_max ] }
  - { platform: copy, name: "Phase C Power", source_id: phase_c_power, filters: [ *power_min, *power_max ] }
  - { platform: copy, name: "Total Power", source_id: total_power, filters: [ *power_min, *power_max ] }
  # - { platform: copy, name: "Balance Power", source_id: balance_power, filters: [ *power_min, *power_max ] }
  - { platform: copy, id:  cir1_b, source_id: cir1, filters: [ *power_min, *power_max ], name: "#1" }
  - { platform: copy, id:  cir2_b, source_id: cir2, filters: [ *power_min, *power_max ], name: "#2" }
  # - { platform: copy, id:  cir3_b, source_id: cir3, filters: [ *power_min, *power_max ], name: "#3" }
  # - { platform: copy, id:  cir4_b, source_id: cir4, filters: [ *power_min, *power_max ], name: "#4" }
  # - { platform: copy, id:  cir5_b, source_id: cir5, filters: [ *power_min, *power_max ], name: "#5" }
  # - { platform: copy, id:  cir6_b, source_id: cir6, filters: [ *power_min, *power_max ], name: "#6" }
  # - { platform: copy, id:  cir7_b, source_id: cir7, filters: [ *power_min, *power_max ], name: "#7" }
  # - { platform: copy, id:  cir8_b, source_id: cir8, filters: [ *power_min, *power_max ], name: "#8" }
  # - { platform: copy, id:  cir9_b, source_id: cir9, filters: [ *power_min, *power_max ], name: "#9" }
  # - { platform: copy, id:  cir10_b, source_id: cir10, filters: [ *power_min, *power_max ], name: "#10" }
  # - { platform: copy, id:  cir11_b, source_id: cir11, filters: [ *power_min, *power_max ], name: "#11" }
  # - { platform: copy, id:  cir12_b, source_id: cir12, filters: [ *power_min, *power_max ], name: "#12" }
  # - { platform: copy, id:  cir13_b, source_id: cir13, filters: [ *power_min, *power_max ], name: "#13" }
  # - { platform: copy, id:  cir14_b, source_id: cir14, filters: [ *power_min, *power_max ], name: "#14" }
  - { platform: copy, id:  cir15_b, source_id: cir15, filters: [ *power_min, *power_max ], name: "#15" }
  - { platform: copy, id:  cir16_b, source_id: cir16, filters: [ *power_min, *power_max ], name: "#16" }


  - platform: template
    name: "Total Power"
    lambda: return id(phase_a_power).state + id(phase_b_power).state + id(phase_c_power).state;
    update_interval: 1s
    id: total_power
    device_class: power
    state_class: measurement
    unit_of_measurement: "W"

  # - platform: template
  #   internal: false
  #   name: "Total Circuits Power"
  #   lambda: return id(cir1).state + id(cir2).state + id(cir3).state + id(cir4).state + id(cir5).state
  #     + id(cir6).state + id(cir7).state + id(cir8).state + id(cir9).state + id(cir10).state
  #     + id(cir11).state + id(cir12).state + id(cir13).state + id(cir14).state + id(cir15).state + id(cir16).state;
  #   update_interval: 1s
  #   id: total_power_circuits
  #   unit_of_measurement: "W"

  - name: "Total Daily Energy"
    power_id: total_power
    platform: total_daily_energy
    accuracy_decimals: 0
    restore: false
    unit_of_measurement: Wh
    state_class: total_increasing
    device_class: energy
    filters: [ *throttle_energy ]

  # - platform: template
  # lambda: !lambda |-
  #   return max(0.0f, id(total_power).state -
  #     id( cir1).state -
  #     id( cir2).state -
  #     id( cir3).state -
  #     id( cir4).state -
  #     id( cir5).state -
  #     id( cir6).state -
  #     id( cir7).state -
  #     id( cir8).state -
  #     id( cir9).state -
  #     id(cir10).state -
  #     id(cir11).state -
  #     id(cir12).state -
  #     id(cir13).state -
  #     id(cir14).state -
  #     id(cir15).state -
  #     id(cir16).state);
  # update_interval: never   # will be updated after all power sensors update via on_update trigger
  # id: balance_power
  # device_class: power
  # state_class: measurement
  # unit_of_measurement: "W"

  - { power_id:  cir1,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#1 Energy" }
  - { power_id:  cir2,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#2 Energy" }
  # - { power_id:  cir3,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#3 Energy" }
  # - { power_id:  cir4,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#4 Energy" }
  # - { power_id:  cir5,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#5 Energy" }
  # - { power_id:  cir6,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#6 Energy" }
  # - { power_id:  cir7,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#7 Energy" }
  # - { power_id:  cir8,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#8 Energy" }
  # - { power_id:  cir9,  platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#9 Energy" }
  # - { power_id:  cir10, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#10 Energy" }
  # - { power_id:  cir11, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#11 Energy" }
  # - { power_id:  cir12, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#12 Energy" }
  # - { power_id:  cir13, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#13 Energy" }
  # - { power_id:  cir14, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#14 Energy" }
  - { power_id:  cir15, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#15 Energy" }
  - { power_id:  cir16, platform: total_daily_energy, accuracy_decimals: 0, restore: false, unit_of_measurement: "Wh", state_class: "total_increasing", device_class: "energy", filters: [ *throttle_energy ], name: "#16 Energy" }